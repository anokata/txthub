Выкачать все репы и заархить и схранить.
*  Детальнее обдумывать и разрабатывать задание, требования, архитектуру, проект, интерфейсов описание... только тогда начинать программировать.
*  Изучать Linux. rlogin, ssh, удалённый раб стол. Rdesktop
    1.0 Изучать vim. буферы, 
        vimfm
    1.1 сети и сетевые утилиты. nmap как найти хосты и узнать про них. arp. 
    1.2 книги и статьи
    1.3 Git аутентификация, работа, слияние, откат.
    1.4 скрипт резеврного копирования. список файлов, tar, gz, copy rscync gdrive yandsk ... pyserver
   dict sdcv
    man dmenu(fast app)
*  python

    отделять IO
      префиксы i_ o_ io_
      # State class for all world io state & subclass - out, in, player, input...
** roguelike
      Сделать сначала отображение символов из png атласом. Используя SDL
      Можно сделать красивую консоль.
            мягко мигающие символы. c матрицей фоном.
            со схемами и бегущими сигналами
            как я вижу консоль, и магию символов и вычислений.

** 2.X
    Автозапуск. Фун определения что скрипт запущен первый раз в день, последний раз(вести журнал).
        записывать время включения пк и выключения(бодрствование вычислять, общее)
        погоду писать в папку статистики в csv(чем открывать?) или sc(странный формат - плохо читать текстом)? или yaml?
        отдельно же журнал бодрстования.
        отдельно дневник дел. (как реализовать)
            > pday pomilsya
            > pday do python learn
            > pday weigth 65 # Запишет на текущую дату данные
            > pday veiw # покажет в табличном формате
            sleep.log 11.12.2012,8:01:01,23:01:01,7:23:21
        Финансы
** 2.1 (TZ_cloudDrive) разобраться с rest api github, vk. Watchdog.  использовать либы (или не) и написать прогу для бэкапинга.
        bottle, flask
        кроме этого хочу свою линукс среду удалённо. и со своими прогами. клиента потоньше?
            монтирование локальных разделов в удалённый лин и работа в нём со своими локальными данными.
** 2.2 игры (TZ_platformer, TZ_survival, TZ_games) roguelike
        2.2.0 Придумать геймплей
        2.2.1 меню
        в игре должен быть элемент Большого шага мира, после которого происходит моного событий и хочется поиграть ещё и ещё.
        или даже несколько видов таких шагов и прогресса. типа сначала дни(часы), потом неделя, месяц...
        и бесконечное развитие но имеющее смысл(новые вызовы, новое...) и не ясно сначала что можно развиться ещё и ещё и
         разные виды развития и переразвития.
        Инвенталь наподобие элоны
        редактор объектов, формат Yaml (ценность объекта... тип)
    Progress game. semiAuto, text. выбрал - идти найти монстра, бить... прогресс.. замах.. удар, иду, поднимаю предмет.
        клики ускоряют чуток. кач ускоряет действия некоторые?
        или как работа - ежедневно ходить в данж, разноуровневый. покупать шмот самому игроку...
        Описывать что видит и происходит. Ограниченный инвентарь - список 10,
        при выборе список возможных действий. Для квеста что как?

** 2.3 (tasks.txt) решать задачки.
** 2.4 (books.txt) читать книги
        (Упраж) (Практика) Саммерфилд программирование на Python - Упражнения
        (Упраж) Лутц изучаем
        (Практика) Python v systemnom - linux net ...

        (Практика) (en) Making games - pygame
        (Практика) (en) hackingciphers шифрование и основы
        Саммерфил Python на практике - Паттерны
        Рамальо - питоновкие идеи
        Лутц программирование (много обо всё, либах)

        Другое чтиво:
        Vim
        Совершенный код
        Программист фанатик
        Практика программирования
        Алгоритмы, теория и практическое применение
        Алгоритмы, построение и анализ
        Жемчужены программирования
        Чистый код
        Искусство програмирования для Unix
        Операционная система Linux 
        Рефакторинг
        Компиляторы dragon book
        OpenGL
        Сети TCP/IP
      Стоит почитать книгу где что-то делается, проектируется:
        (Практика) (en) Making games - pygame
        (Практика) (en) hackingciphers шифрование и основы

** 2.5 (TZ_chat) чат. сделать клиент на kiwi под android. доделать пользователей...
        post
** 2.6 (TZ_zametki) Заметки
** 2.7 youtube api github api vk api REST. Как получить список видео для пользователя по подпискам.
        2.7.0 просматривать список подписок. добавлять подписки в список. получать список последних видео с канала,
         с возможностью получить следующие. получение урл видео и скачка в определённом формате. список пользователей.
         список скачанных видео и запуск. настройка автоскачки последних новых видео с каналов.
** 2.8 изучать модули питона(collections, functools..) и др стандартные возможности.
        http://www.brunningonline.net/simon/python/quick-ref2_0.html#BuiltIn
        http://aliev.me/runestone/Trees/ListofListsRepresentation.html
        https://pythonworld.ru/moduli
** 2.A tree progressBar
** 2.B shell, editor
** 2.C VM, lang
    Что ещё точно осовить в python:
    создание пакетов. setuptools, pip, easy_install
** 2.9 dbm pickle shelve создание архива, tar, zip. (для бэкапа)
** 2.D Брать тему, искать, придумывать на неё задачи и решать изучая её.
         PIL Complex nums : фрактал, raytracer
        os files
        web server http
        как делать пакеты, установочные.
        virtualenv
        Shovel
        Redis
** 2.E Свой консольный типа trello(+web) + календарь.
** 2.F отравляку на почту
** 2.10 3D звёзды... свет туман фонарь, музон...
    Многопоточность(для задач)
    Генетические алгоритмы
    Нейронные сети.
    TCP SMTP mail


* учиться рисовать пиксель арт.
** Изучать sunvox или другое
* Новый софт:
    bash -o vi
    calcurse
    trello
    streamer
* БД, индексы.
     
* что делать
      Рисовать, учиться
      Музыка
      Читать
      Программировать
      Тренироваться, кувырки, худеть
      Прибираться
      TeX
* идеи
сервис, хранить данные на множестве сервисов в виде кусков(почта?) или как то
распределённо в сети.
Сервис чтения книг с закладками.
opengl кольца(планет) и линии..
!!!надо написать преобразователь JS кода. для возможности сначала писать главную
фун и использовать далее объявленные, чтобы читать сверху вниз. а не
объявлять всё заранее.
* task stack
настроить postgresql
выписать что нужно изучить исходя из разговора
      git cherry-pick
      jira ..
      js test: selenium, karma
      angular2

      вёрстка
      patterns: adapter, wrapper, decorator, proxy, bridge, facade, chain of responsibility
      php, namespaces
      cPanel,...
      rabbitmq ...ze..mq rabbitMQ

      backbone.js
      как ветки работают при удалённом репе? если.. что? push origin?  new_fea создавать там ветку ещё одну удалённую?
      sockets создать на питоне проги обменивающиеся через них
      модуль inspect
      генераторы
       +grep вывод пред и пост строк около найденной - контекст - -A -B -C(before and after)
       типы файлов в линуксе
       cmd  cmp сравнение файлов
       lsof
       семафоры..
       agile 
       netstat -lntup порты
       fuser
       mknod или mkfifo
       git rebase --squash -i
       аспектно ориентированное п-е, js
       null > 0, null == 0, ! true is null >= 0

для чего использовать IPC? Надо найти задачу. может моя симуляция сгодится?
есть существа и они обмениваются сообщениями(какими и для чего?)

* future
 mobile os  свою, исследовать как записать, драйверы.

