key
rand
random
import random as r
r.seed()
r.randint(0,10)
[r.randint(0,10) for x in range(1,10)]
[r.randint(0,10) for x in range(1,100)]
a={1:'a',2:'b'}
a
a.sort
sort
a.items
a.items()
a.items()[0]
a.items()
a.items().sort
import ConfigParser
import configparser
import configparser as cp
config = cp.ConfigParser()
config
config.read('cxoxo.ini')
a = config.read('cxoxo.ini')
a
a['main']
a
a.sections
a = config.read('cxoxo.ini')
a
type(a)
config
pwd
os.pwd
dir(os
)
import os
os.pwd
dir(os)
a = config.read('cxoxo.inis')
a
a = config.read('cxoxo.ini')
a
ls
config = cp.ConfigParser()
a = config.read('cxoxo.ini')
a
import sys
sys.version
exit
exit(0
import configparser as cp
c = cp.ConfigParser()
f = 'cxoxo.ini')
f = 'cxoxo.ini'
f
c
a = c.read(f)
a
c
c.sections
c.sections()
c['main']
c['main']['boardSize']
c['main']['boardSize']=1
c.set('main','boardSize',8]
c.set('main','boardSize',8)
c.set('main','boardSize', '8')
c['main']['boardSize']
import termcolor
import Blessing
import xoxo
a = xoxo.GameState()
a
dir(a)
a.winline
a.w
a.needInLine
a.board
a.boardSize
a = [(1,1)]
a
b = (1,1)
a.index(b)
a.find(b)
a.index((1,1))
a.index((1,2))
dir(a)
(1,1) in a
b in a
a=dict()
a
a.add(1,2)
a[1]=2
a
dict([3,5])
dict([(3,5)])
dict([(3,5),('a',1)])
'2'.center(2)
'2'.left(2)
'2'.ljut(2)
'2'.ljust(2)
'2'.rjust(2)
import curses
stdscr = curses.initscr()
c = stdscr.getch()
rint 'you entered', chr(c)
curses.endwin()
import curses
stdscr = curses.initscr()
qqq
'~~
~
a=[]
a[1] or 1
a=[]
a += (1,2)
a
a += ((1,2))
a~
a += [((1,2))]
a
a += [(1,2)]
a
a=range(1,8)
a
a=list(range(1,8))
a
a[-1:-3]
a[-1:3]
a[-1:]
a[-3:-1]
import urllib2
import urllib
a = urllib.request("ya.ru")
import urllib2
a = urllib.request.urlopen("ya.ru")
b=a.read()
b
import lxml
import lxml.html
lxml.html.fromstring(b)
p =lxml.html.fromstring(b)
p
p.tag
a = urllib.request.urlopen("ya.ru")
a = urllib.request.urlopen("http://ya.ru")
import urllib
a = urllib.request.urlopen("http://ya.ru")
import wg
urllib
import urllib
urllib.request
import PIL
import Image
import pil
import pillow
import Pillow
import PIL
import random
import ImageDraw
from PIL import Image, ImageDraw
i = Image.open("test.jpg")
i = Image.open("./test.jpg")
i = Image.open("/home/ksi/test.jpg")
i = Image.open("ts.jpg")
i
d = ImageDraw.Draw(i)
d
w = i.size[0]
w
h = i.size[1]
h
p = i.load()
p
for i in range(w):
	for j in range(h):
pix
p
p[1]
p[1,2]
"ab" > "cd"
"aba" > "cd"
"ab" > "aa"
"aba" < "ca"
"aba" < "z"
"abc" < "abca"
жж
print('print(')
a='print('
a='print(';
a='print(';b=')'
print(a,b)
a='print(';b=')';print(a,b)
a='print(a,b';b=')';print(a,b)
import euler8
mulStr("12345")
euler8.mulStr("12345")
a='*'*13
a
a[:2]
a=[]
a.append([1])
a
a.add([1])
a.join([1])
a.extend([1])
a
a.extend([1])
a
a=list(range(20))
a
a.max()
a.maximum
generate_grammar
map
map()
map([1,2],lambda x:x*x)
map(lambda x:x*x, [1,2])
list(map(lambda x:x*x, [1,2]))
"alsdjfLJ".upper
"alsdjfLJ".upper()
"alsdjfLJ".lower()
"a".isalpha()
set(range('a','a'))
list(range('a','z'))
import strings
import string
string.letters
string.digits
string.leters
string.letters
string.uppercase
map(chr,range(ord('a',ord('z'))
)
map(chr,range(ord('a'),ord('z')))
list(map(chr,range(ord('a'),ord('z'))))
list(map(chr,range(ord('a'),ord('z')+1)))
set(list(map(chr,range(ord('a'),ord('z')+1))))
set(map(chr,range(ord('a'),ord('z')+1))))
set(map(chr,range(ord('a'),ord('z')+1)))
list(range(99,0,-1))
list(range(99,-1,-1))
import re
s = "asldfj     sdflj"
re.sub('\s\s+',' ',s)
s
nomorespace = re.sub('\s\s+',' ',s)
nomorespace
s = "asldfj     sdflj.saf.sdf.dsfsd.fs.fdsf. dsfsdf"
nomorespace = re.sub('\s\s+',' ',s)
nomorespace
re.sub('\.(\w)','. (1)',nomorespace)
re.sub('\.(\w)','. \`',nomorespace)
re.sub('\.(\w)','. \1',nomorespace)
re.sub('\.(\w)','. ',nomorespace)
re.sub('\.(\w)','. \g1',nomorespace)
re.sub('\.(\w)','. \g<1>',nomorespace)
"afd"[:-1]
import re
re.sub('','X',"abcdefh")
re.sub('h^','X',"abcdefh")
re.sub('h$','X',"abcdefh")
re.sub('h$|x$','X',"abcdefh")
re.sub('h$|x$','X',"abcdefhx")
reduce
from functols import reduce
from functools import reduce
reduce(lambda x:x,[1,2,3,4,3,21,2])
reduce(lambda x, y:x,[1,2,3,4,3,21,2])
reduce(lambda x, y:x,[1,2,3,4,3,21,2],0)
reduce(lambda x, y:x if x > y else y,[1,2,3,4,3,21,2])
filter
filter(lambda x:x,[1])
list(filter(lambda x:x,[1]))
list(range(10))
list(range(10)).reverse()
list(range(10)).reverse
reverse(list(range(10)))
list(range(10)).reverse('a')
list(range(10)).reverse()
a= list(range(10)).rever
a
type(a)
list(range(10))
a=list(range(10))
a
a.reverse()
a
a.copy()
b=a.copy().reverse()
a
b
b=a.copy()
b
a
b.reverse()
b
a
a="adsf sladfj fj dsf lf sjd"
a
b=a.split().copy()
b
a
b=a.split().reverse()
b
reversed(b)
b
a
reversed(a)
set(reversed(a))
a
set(list(reversed(a)))
(list(reversed(a)))
(list(reversed(a.split())))
set(list(reversed(a.split())))
set((reversed(a.split())))
a.split()
set(a.split())
a
reversed(a)
str(reversed(a))
str(list(reversed(a)))
str((reversed(a)))
a
a[::-1]
a[::-1].split()
sort(a)
a
a[::-1].split()
sort(a[::-1].split())
a[::-1].split().sort()
a
sorted(a[::-1].split())
sorted(a[::-1].split())[1]
sorted(a[::-1].split())
a.
a
a.find
a.find('sl')
b
b = a.split()
a
b
b[2]
del b[2]
b
b.index('lf')
b =dict(a)
zip(a,a)
list(zip(a,a))
b=dict(list(zip(a,a)))
b
b.size
len(b)
sqrt
sqr
import math
math.sqrt
math.sqrt(7)
int(math.sqrt(7))
int(math.sqrt(7).floor())
int(math.floor(math.sqrt(7)))
int(math.ceil(math.sqrt(7)))
b
b.items()
print(20:30)
print('a':30)
a = [(1,2),(3,4),(0,5),(5,0)]
a
sorted(a)
sorted(a,key=lambda x,y:y)
sorted(a,key=lambda x:x)
sorted(a,key=lambda x,y:x)
sorted(a,key=lambda x: a,b = x)
sorted(a,key=lambda (x,y): x)
sorted(a,key=lambda x: x[1])
import time
time.sleep(0.2)
a
d
dict(a)
b = dict(a)
b
filter
filter(lambda x:x,b)
list(filter(lambda x:x,b))
dict(filter(lambda x:x,b))
list(filter(lambda x:x,b))
b
list(filter(lambda x:x[0],b))
list(filter(lambda x: True,b))
dict('a':1)
{'a':1}
b={'a':1}
list(filter(lambda x: True,b))
list(filter(lambda x: x[1] == 2,b))
list(filter(lambda x: x[1] == 1,b))
list(filter(lambda x: x[0] == 1,b))
list(filter(lambda (x,y): x[0] == 1,b))
list(filter(lambda x: x == 1,b))
list(filter(lambda x: x == 'a',b))
list(filter(lambda x: x == 'a',b.values()))
list(filter(lambda x: x == 1,b.values()))
list(filter(lambda x: x == 1,b.values(),b.keys()))
import random as r
r.randomint
r.randint(20)
r.randint(1,20)
import Tkinter
anagramRun(
)
anagramRun()
df
anagramRun()
fie
five
anagramRun()
five
anagramRun()
hidden
lingo()
aeoiu
dslfj
aslfslkjfasf
'123456'[:5]
lingo()
aeoui
broth
qwert
yuiop
asdfg
hodo
hodoo
rrrrr
hodod
holod
a='abc?dd!dd'
import re
re.sub('(\?|\!)','\g<1>\n',a)
re.sub('(\?|\!)','\g<1>'+'\n\,a)
re.sub('(\?|\!)','\g<1>'+'\n',a)
re.sub('(\?|\!)','\g<1>\n',a)
print(re.sub('(\?|\!)','\g<1>\n',a))
print(re.sub('(\?)(\!)','\g<1>\n',a))
print(re.sub('(\?|\!d)','\g<1>\n',a))
print(re.sub('((\?|\!)d)','\g<1>\n',a))
re.search('(\?|\!)','\g<1>\n',a)
re.search('(\?|\!)',a)
list re.search('(\?|\!)',a))
list (re.search('(\?|\!)',a))
re.search('(\?|\!)',a)[0]
re.group
re.search('(\?|\!)',a).group
list(re.search('(\?|\!)',a).group)
re.search('(\?|\!)',a).group[0]
re.search('(\?|\!)',a).group(0)
re.findall('(\?|\!)',a).group(0)
re.findall('(\?|\!)',a)
re.split('(\?|\!)',a)
a
print(re.sub('\.','\g<1>\n',a))
a+=".sdf.df.d.fd."
print(re.sub('\.','\g<1>\n',a))
a
print(re.sub('\.','\.\n',a))
print(re.sub('\.','.\n',a))
print(re.sub('(\.','.\n',a))
re.sub('','\g<0>  \g<1>  \g<2>','abcde')
re.sub('(((a)))','\g<0>  \g<1>  \g<2>','abcde')
re.sub('(((a)b)c)d','\g<0>  \g<1>  \g<2>','abcde')
re.sub('(((a)b)c)d','\g<0>  \g<1>  \g<2>    \g<3>    ','abcde')
and(1>2, 2>3)
and
all
all(1>2, 2>3)
all([1>2, 2>3])
any([1>2, 2>3])
set('aba')
set('aba') - set('abc')
set('dba') - set('abc')
set('dba') - set('aba')
set('dba') + set('aba')
set('dba') | set('aba')
a
a[3]
del a[3]
set() | {1}
set() | {1,2}
import random as r
r.randint(2)
r.randint(0,1)
r.choice('a','b')
r.choice(['a','b'])
lsl
a = [1,2]
b=a[1]
del a[1]
a
b
del a[0]
a
b
startwith
'ab'.startwith
'ab'.startWith
'ab'.startswith
'ab'.startswith('a')
pokes = 'audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon cresselia croagunk darmanitan deino emboar emolga exeggcute gabite girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2 porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask'
item = lst[0]
lst = pokes.copy()
lst = pokes.clone()
lst = pokes.split()
lst
item = lst[0]
item
del lst[0]
lst
netx = filter(lambda x: x.startswith(item[-1]), lst)
netx
list(netx)
item[-1]
itme
item
[] == False
if []:
	print('a')
item
lst
item = lst[0]
item
del lst[0]
nxt = filter(lambda x: x.startswith(item[-1]), lst)
nxt
list(nxt)
[]+ 'ab'
[]+ ['ab']
alph = list(map(chr, list(range(ord('a'), ord('z')+1))))
alph
alph1 = list(map(chr, list(range(ord('c'), ord('z')+1))))
alph2 = list(map(chr, list(range(ord('f'), ord('z')+1))))
key = dict(zip(alph1, aplph2))
code = "g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj."
alph1 = list(map(chr, list(range(ord('c'), ord('z')+1))))
alph2 = list(map(chr, list(range(ord('f'), ord('z')+1))))
key = dict(zip(alph1, alph2))
key
alph2 = list(map(chr, list(range(ord('e'), ord('z')+1))))
key = dict(zip(alph1, alph2))
key
key + {'a' : 'a'}
key['y']
key['x']
import string
str.maketrans(
import pyglet
win = pyglet.window.Window()
pyglet.gl.glClearColor(0.7,0.5,0.3, 1)
enumerate(list('abc'),2)
list(enumerate(list('abc'),2))
int()
dict()
str()
int(2)
lambda:0
(lambda:0)()
100!
product
mul
prod
sum
dir()
dir(__builtins__)
def fact(n):
	if n == 0:
		return 1
	else:
		return n * fact(n-1)
fact(10)
a = fact(100)
a
a = str(fact(100)).split('')
a = list(str(fact(100)))
a
list(123)
import functools as f
f.reduce(lambda x,y: x + int(y), a,0)
sort
[].sort
[1,2,0].sort()
a =[1,2,0].sort()
a
a =[1,2,0]
a
a.sort()
a
ord('a')
ord('A')~
ord('A')
ord('A') - 65
from math import sqrt
max
max(1,2)
max(1,2,3)
a=class():
	class
class A():
	pass
a = A()
a is A
type(a)
type(a) == A
[1] * 2
abs
arg
import os
os.args
import sys
sys.argv
str.strip()
" a ".strip()
int
dir(int)
int.__add__
int.__add__(1,2)
list(1)
from math import *
sin
help(sin)
pi
help(radians)
class A():
	b = 1
a = A()
b = A()
a.b =2
b.a
b.b
a.a
a.b
a
b
class B():
	def __init__(self):
		pass
a = B()
b = B()
a
b
class A():
	def __init__(self,n):
		self.n = n
a=A(2)
b=A(3)
a
b
a.n
b.n
class A():
	n = []
	def __init__(self,x):
		n +=[x]
a=A(2)
class A():
	n = []
	def __init__(self,x):
		self.n += [x]
a = A(1)
a
a.n
b = A(2)
a
b
b.n
enumerate(13)
enumerate([13])
dict(enumerate([13]))
dict(enumerate(range(10)))
a=list(range(10))
a
a[:-1]
"asdf"
dir(str)
"asdf".find(s)
"asdf".find('s')
"asdf".find('sd')
"asdf".find('dd')
import os
print(os.path)
import sys
print(sys.path)
import pyglet.window
key
pyglet.window.key
dir(pyglet.window.key)
pyglet.window.key._1
sign
import cocos
namedtuple
form collections import namedtuple
form collection import namedtuple
from collection import namedtuple
from collections import namedtuple
namedtuple
x = namedtuple('a', 'b c d')
x
a
x
x(1, 2, 'c')
x
a=x(1, 2, 'c')
a
a.b
a.d
a.b=1
x
a
a(b)
s = '123'
reversed(s)
str(list(reversed(s)))
a=reversed(s)
dir(a)
list(reversed(s))
''.join(list(reversed(s)))
name
from unicodedata import *
name('a')
name('А')
name('`')
name('ё')
name('(')
name('?')
name('#')
name('!')
name('\u00a2')
lookup('\u00a2')
print('\u00a2')
print(range('\u00a2','\u00ff'))
print(range(ord('\u00a2'),ord('\u00ff')))
chr(162)
chr(255)
list(map(chr, list(range(160,300))))
name('ß')
ord('ß')
chr(222)
lookup('SNOWMAN')
'{0:!^20s}'.format('BIG SALE')
'{0:^^20s}'.format('BIG SALE')
'{0:>^20s}'.format('BIG SALE')
'{0:=^20s}'.format('BIG SALE')
'{0:=>20s}'.format('BIG SALE')
"ab cd"[:1]
"ab cd"[:2]
"ab cd"[2:3]
"ab cd"[3:4]
# Note: Return a string of 1 decimal place.
def BMI(weight, height): 
	return "%.1f" %  (weight / (height*height))
BMI(20,10)
def BMI(weight, height): 
	return "%.1f" %  (weight / (height*height))
BMI(20,10)
BMI(110,20)
BMI(110,2)
[][0]
import types
import sys
sys.path
sys.path += "ab"
sys.path
sys.path += ["ccd"]
sys.path
print
map(print, [12])
map(print, [12])()
a=map(print, [12])
list(a)
dir(a)
from collections import defaultdict
sleep
import sys
sys.sleep
os
import os
os.sleep
sys
import time
time.sleep
bool
bool()
import pyganim
repeat
str.repeat
''.repeat
[].repeat
generate
form itertools import repeat
from itertools import repeat
help(repeat)
list(repeat(10, 2))
list(zip('asdf', repeat(1,4))
)
l = []
l.appent(1,2)
l.appent((1,2))
l.append((1,2))
l
import os
os.sys
ls
`print(1)`
exit()
import pygame as p
p.Rect
p.Rect(10, 11, 20, 21)
r =p.Rect(10, 11, 20, 21)
r
r.x
r.y
r.bottom
r.w
r.width
r.h
r.height
r.left
r.x -= 10
r.x
r
r.w
r.h
r.top
r.left
r.topleft
r - 1
r - (1,1)
r.up
r.top
p.Rect()
p.Rect(0)
p.Rect(0,0)
p
p.Rect(0,0,1,1)
import pygame as p
a = p.Rect(1,2,5,6)
a.move((2,2))
a
min(1,2,3)
cdr
car
l = 'aaaaaaaaa'
l = 'abcdefghj'
l[:3]
l[3:]
l[:2] + l[4:]
l[:2] + l[3:]
str.isdigit
dict(a=1, b=2)
dict([[a,1],[b,2]])
a=1
b=2
dict([[a,1],[b,2]])
a
tuple(dict([[a,1],[b,2]]))
tuple(dict([[a,1],[b,22]]))
tuple(range(10))
tuple(1,2)
'abc,def.dsf'.split(',.')
'abc,def.dsf'.split('.')
'abc,def.dsf'.split(',').split('.')
help(split)
help(str.split)
import pymysql
import pymysql as m
m
help(m.connect)
m.connect(host='anokata.mysql.pythonanywhere-services.com', database='anokata$default', username='anokata', password='wasmwasm')
help(m.connect)
m.connect(host='anokata.mysql.pythonanywhere-services.com', database='anokata$default', user='anokata', password='wasmwasm')
c =m.connect(host='anokata.mysql.pythonanywhere-services.com', database='anokata$default', user='anokata', password='wasmwasm')
globals
globals()
locals()
dir()
help(modules)
help('modules')
l = help('modules')
l
dir
dir()
import sys as s
s.modules.keys()
s.modules
s.modules.keys()
import pymysql as m
help('m.connect')
help(m.connect)
m.connections
m.connections()
m.connections.__doc__
print(m.connections.__doc__)
import pygame as p
p.USEREVENT
a = [(1,2),(2,8)]
a.sort
a.sort()
a
a = [(1,2),(2,8),(0,3)]
a.sort()
a
a.sort(key=lambda x, y:y)
a.sort(key=lambda x: x[1])
a
a = list(range(10))
a
a.pop(3)
a
a.pop(max(a))
a
a.pop(8)
a
a.pop(8)
a.pop(0)
a
dir(a)
a.remove(2)
a
a.remove(7)
a
a.remove(8)
a
"asdf"[1:3]
"asdf"[0:1]
'asdfdddadfdfdd'.count('d')
'asdfdddadfdfdd'.count('da')
